<#
.SYNOPSIS
Verificación CRÍTICA del Rol WSUS y el parche OOB (Fuera de Banda)
para la vulnerabilidad RCE CVE-2025-59287.

.DESCRIPTION
Este script realiza una auditoría dinámica:
1. Obtiene la versión del Sistema Operativo del servidor.
2. Mapea el SO al KB (HotFix) de mitigación OOB correcto.
3. Verifica si el Rol WSUS está instalado.
4. Si está instalado, verifica si el KB crítico está presente.

.NOTES
- VERSIÓN 4: Añadido .Trim() al 'switch' para limpiar espacios en blanco
  de la salida de WMI (ej. "Server 2022 ").
- VERSIÓN 3: Se reemplazó la función de mapeo por 'switch -Wildcard'.
- VERSIÓN 2: Compatible con PowerShell 5.1 (usa Get-WmiObject).
- Los KBs listados son los parches de mitigación oficiales para CVE-2025-59287.
- Requiere permisos de administrador y acceso WinRM en los servidores remotos.
#>

function Get-WmiCompatibleOsName {
    param(
        [Parameter(Mandatory=$true)]
        [string]$Server
    )
    
    # Este es el método compatible con PowerShell 5.1 para obtener el SO remotamente
    $OSInfo = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Server -ErrorAction Stop
    
    # La propiedad que contiene el nombre del SO es "Caption"
    return $OSInfo.Caption
}

function Get-WsusPatchKB {
    param(
        [Parameter(Mandatory=$true)]
        [string]$OsName
    )

    # Usar 'switch' con -wildcard es más limpio y evita problemas de orden (ej. 2012 R2 vs 2012)
    # Esta es la corrección clave para el error de "KB_DESCONOCIDO"
    # Se añade .Trim() para eliminar espacios en blanco (ej. "Windows Server 2022 ")
    switch -Wildcard ($OsName.Trim())
    {
        "*Windows Server 2012 R2*"    { return "KB5070881" }
        "*Windows Server 2012*"       { return "KB5070880" }
        "*Windows Server 2025*"       { return "KB5070885" }
        "*Windows Server 2022*"       { return "KB5070884" }
        "*Windows Server 2019*"       { return "KB5070883" }
        "*Windows Server 2016*"       { return "KB5070882" }
        Default                       { return "KB_DESCONOCIDO_O_NO_APLICABLE" }
    }
}

# --- CONFIGURACIÓN ---

# Opción 1 (DEFAULT): Auditar solo el equipo local (donde se ejecuta el script)
$Servers = $env:COMPUTERNAME 

# Opción 2: Auditar múltiples servidores (DESCOMENTA Y EDITA para auditoría masiva)
# $Servers = "WSUS-PROD-01", "WSUS-DR-02", "SERVER-WS2019" , "COBOG1WSUS001"

$Report = @()
$VULNERABILITY_ID = "CVE-2025-59287" # Identificador de la vulnerabilidad RCE

# --- LÓGICA DE AUDITORÍA ---

foreach ($Server in $Servers) {
    Write-Host "Iniciando verificación crítica en $($Server)..." -ForegroundColor Cyan
    $CurrentKB = "N/A" # Inicializar KB para este servidor
    $OsName = "Desconocido"
    $IsWsusInstalled = $false
    
    try {
        # 1. Obtener información del Sistema Operativo (Método compatible con PS 5.1)
        $OsName = Get-WmiCompatibleOsName -Server $Server
        Write-Host "  -> SO Detectado: $OsName" -ForegroundColor DarkYellow

        # 2. Determinar el KB OOB requerido basado en el SO
        $RequiredKB = Get-WsusPatchKB -OsName $OsName
        $CurrentKB = $RequiredKB
        Write-Host "  -> Parche OOB requerido: $RequiredKB" -ForegroundColor DarkYellow
        
        # 3. Verificar si el Rol de WSUS está instalado
        $WSUSRole = Get-WindowsFeature -ComputerName $Server -Name UpdateServices -ErrorAction Stop
        
        $IsVulnerable = "No"
        try { $IsWsusInstalled = [bool]$WSUSRole.Installed } catch {}

        if ($IsWsusInstalled) {
            
            # 4. Si el rol está activo, verificamos el estado del parche
            if ($RequiredKB -ne "KB_DESCONOCIDO_O_NO_APLICABLE") {
                $KBStatus = Get-HotFix -Id $RequiredKB -ComputerName $Server -ErrorAction SilentlyContinue
                
                if ($KBStatus) {
                    $VulnerabilityStatus = "WSUS Activo - Parche $RequiredKB INSTALADO (Mitigado)"
                } else {
                    $VulnerabilityStatus = "🔓 WSUS ACTIVO - VULNERABLE a $VULNERABILITY_ID 🚨 (Parche $RequiredKB AUSENTE)"
                    $IsVulnerable = "Sí"
                }
            } else {
                $VulnerabilityStatus = "WSUS Activo - El SO ($($OsName.Trim())) no tiene un KB de mitigación conocido en el script. Revisión manual requerida."
                $IsVulnerable = "Manual"
            }
        } else {
            $VulnerabilityStatus = "Rol WSUS no instalado (No afectado)"
        }
        
        $Report += [PSCustomObject]@{
            ServerName          = $Server
            Operating_System    = $OsName.Trim() # Limpiamos la salida del CSV también
            WSUS_Role_Installed = $IsWsusInstalled
            KB_Checked          = $CurrentKB
            CVE_Status          = $VulnerabilityStatus
            Requires_Action     = $IsVulnerable
        }
    }
    catch {
        Write-Host "  -> ¡ERROR! No se pudo conectar o procesar: $($_.Exception.Message)" -ForegroundColor Red
        $Report += [PSCustomObject]@{
            ServerName          = $Server
            Operating_System    = $OsName
            WSUS_Role_Installed = "Error"
            KB_Checked          = $CurrentKB
            CVE_Status          = "ERROR al conectar: $($_.Exception.Message.Split("`n")[0])"
            Requires_Action     = "Error de conexión/Acceso"
        }
    }
}

# --- EXPORTACIÓN DE RESULTADOS ---

$OutputPath = "C:\Temp"
if (-not (Test-Path -Path $OutputPath)) {
    Write-Host "Creando el directorio $OutputPath..."
    New-Item -Path $OutputPath -ItemType Directory | Out-Null 
}

$FileName = "WSUS_CRITICO_Check_$(Get-Date -Format yyyyMMdd_HHmm).csv"
$FullOutputPath = "$OutputPath\$FileName"
# Usar -Encoding UTF8 para asegurar que los caracteres especiales (acentos) se guarden bien en el CSV
$Report | Export-Csv -Path $FullOutputPath -NoTypeInformation -Encoding UTF8

Write-Host ""
Write-Host "¡AUDITORÍA CRÍTICA FINALIZADA!" -ForegroundColor Green
Write-Host "Resultados guardados en: $FullOutputPath" -ForegroundColor Green

